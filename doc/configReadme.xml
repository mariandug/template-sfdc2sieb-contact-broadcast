<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Siebel Contact Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
I want to synchronize contacts from Salesforce to Siebel.

This Template should serve as a foundation for the process of migrating contacts from Salesforce to Siebel, being able to specify filtering criteria and desired behavior when an contact already exists in the Siebel. 

As implemented, this Template leverage the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing).
The batch job is divided in Input, Process and On Complete stages.
During the Input stage the Template will go to the Salesforce and query all the existing Contacts that match the filter criteria.
During the Process stage, each Salesforce Contact will be filtered depending on, if it has an existing matching Contact in the Siebel and if the last updated date of the later is greater than the one of Salesforce.
The last step of the Process stage will group the contacts and create them in Siebel.
Finally during the On Complete stage the Template will both output statistics data into the console and send a notification email with the results of the batch execution. 
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source (Salesforce) and destination (Siebel) systems, that must be made in order for all to run smoothly. 
**Failling to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ polling.frequency `10000`  
This are the miliseconds (also different time units can be used) that will run between two different checks for updates in Salesforce

+ watermark.default.expression `2014-02-25T11:00:00.000Z`  
This property is an important one, as it configures what should be the start point of the synchronization.The date format accepted in SFDC Query Language is either *YYYY-MM-DDThh:mm:ss+hh:mm* or you can use Constants. [More information about Dates in SFDC](http://www.salesforce.com/us/developer/docs/officetoolkit/Content/sforce_api_calls_soql_select_dateformats.htm)
+ polling.startDelayMillis `100`
+ account.id.in.b= `001n00003fMWXA2`
+ account.sync.policy `syncAccount`

**Note:** the property **account.sync.policy** can take any of the three following values: 

+ **empty_value**: if the propety has no value assigned to it then application will do nothing in what respect to the account and it'll just move the contact over.
+ **syncAccount**: it will try to create the contact's account should this is not pressent in the Salesforce instance B.
+ **assignDummyAccount**: it will assign the cotact to an pre existing account in Salesforce instance B. For this it will use the value of  `account.id.in.b`. Finding the Id of the desired Account can be done by executing in your **Sales Force Developer Console** the following query: `SELECT Id, Name, Description FROM Account`.

### Salesforce Connector configuration
+ sfdc.username=`bob.dylan@sfdc`
+ sfdc.password=`DylanPassword123`
+ sfdc.securityToken=`avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.url=`https://test.salesforce.com/services/Soap/u/28.0`

### Oracle Siebel Connector configuration
+ sieb.user=`user`
+ sieb.password=`secret`
+ sieb.server=`server`
+ sieb.serverName=`serverName`
+ sieb.objectManager=`objectManager`
+ sieb.port=`2321`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***1 + X + X / 200***

Being ***X*** the number of Contacts to be synchronized on each run. 

The division by ***200*** is because, by default, Contacts are gathered in groups of 200 for each Upsert API Call in the commit step. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Anypoint Template is implemented on this XML, directed by a batch job that will be responsible for creations/updates. The severeal message processors constitute four high level actions that fully implement the logic of this Anypoint Template:

1. Job execution is invoked from triggerFlow (endpoints.xml) everytime there is a new query executed asking for created/updated Contacts.
2. During the Process stage, each Salesforce contact will be filtered depending on, if it has an existing matching contact in the Siebel.
3. The last step of the Process stage will group the contacts and create/update them in Siebel.
Finally during the On Complete stage the Anypoint Template will logoutput statistics data into the console.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is file is conformed by a Flow containing the Poll that will periodically query Salesforce for updated/created Contacts that meet the defined criteria in the query. And then executing the batch job process with the query results.
]]>
		</section>
	</sections>
</configuration>